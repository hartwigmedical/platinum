#!/usr/bin/env bash

function configure() {
  if [ $# -ne 2 ]; then
    echo "[1;30mUsage: platinum configure -r=<region> -p=<project>[0m"
    echo "[1;30m-r=<region>[0m GCP region where the network resides for enabling private access"
    echo "[1;30m-p=<project>[0m GCP project ID where we'll enable the kubernetes and compute apis"
    exit 1
  fi
  gcloud auth login
  gcloud compute networks subnets update default --region=$2 --enable-private-ip-google-access --project $1
  gcloud services enable compute.googleapis.com --project $1
  gcloud services enable container.googleapis.com --project $1
  gcloud services enable cloudresourcemanager.googleapis.com --project $1
}

function install {
    ./mvnw clean install -DskipTests
}

function login() {
    gcloud auth login
    gcloud auth application-default login
}

function run {
    export SUPPRESS_GCLOUD_CREDS_WARNING=true
    JAR=./target/platinum-local-SNAPSHOT.jar
    if [ ! -f $JAR ]; then
      install
    fi
    java -jar $JAR "$@"
}

function status() {
    kubectl get pods
}

function logs() {
    kubectl logs $1
}

function cleanup() {
  if [ $# -ne 3 ]; then
    echo "[1;30mUsage: platinum cleanup -n=<run_name>[0m"
    echo "[1;30m-n=<run_name>[0m Name of run for which you'd like to cleanup (created with platinum run -n <run_name>)"
    echo "[1;30m-p=<project>[0m GCP project ID where the run was completed. Used to cleanup service accounts"
    echo "[1;30m-r=<region>[0m GCP region where the cluster was created"
    exit 1
  fi
  service_account=platinum-$1@$2.iam.gserviceaccount.com
  gcloud container clusters delete $1-cluster --region $region
  gcloud iam service-accounts delete $service_account
  gcloud projects remove-iam-policy-binding $2 --member=serviceAccount:$service_account --role=roles/iam.serviceAccountUser > /dev/null
  gcloud projects remove-iam-policy-binding $2 --member=serviceAccount:$service_account --role=roles/compute.admin > /dev/null
  gcloud projects remove-iam-policy-binding $2 --member=serviceAccount:$service_account --role=roles/storage.admin > /dev/null
}

CMD=$1
shift
project=""
region=""
while getopts ':p:r:n:' flag; do
    case "${flag}" in
        p) project=${OPTARG} ;;
        r) region=${OPTARG} ;;
        n) run_name=${OPTARG} ;;
        *) ;;
    esac
done

case $CMD in
configure)
  configure $project $region
  ;;
login)
  login
  ;;
run)
  run "$@"
  ;;
status)
  status
  ;;
logs)
  logs $1
  ;;
cleanup)
  cleanup $run_name $project $region
  ;;
esac
#!/usr/bin/env bash

OLD_VERSIONS_FILE="$(dirname $0)/.old_platinum_versions"

function bold() {
    echo "[1;30m${@}[0m"
}

function configure() {
    if [ $# -lt 2 ]; then
        echo "$(bold "USAGE: $0 configure -r <region> -p <project> [-s <subnet>]")"
        echo "$(bold "  -p <project>") GCP project ID where we'll enable the Kubernetes and compute APIs"
        echo "$(bold "  -r <region>") GCP region where the network resides for enabling private access"
        echo "$(bold "  -s <subnet>") VPC subnet for enabling private access (Optional, default is default)"
        exit 1
    fi
    subnet="default"
    if [ ! -z $3 ]; then
      subnet=$3
    fi
    gcloud auth login
    gcloud compute networks subnets update $subnet --region=$2 --enable-private-ip-google-access --project $1
    for service in compute container cloudresourcemanager; do
        gcloud services enable ${service}.googleapis.com --project $1
    done
}

function install {
    ./mvnw clean install -DskipTests
}

function upgrade() {
    read -p "Upgrade to latest on branch $(git branch --show-current) [y/N]? " response
    if [[ "$response" == "y" || "$response" == "Y" ]]; then
        git show --oneline -s >> $OLD_VERSIONS_FILE
        git pull --rebase
        ./mvnw clean install -DskipTests
    else
        echo "Upgrade cancelled. If you prefer to use a different branch you may select from these:"
        git branch --remote
        echo "Switch branches using \"git checkout [branch name]\" then run the upgrade again"
    fi
}

function login() {
    gcloud auth login
    gcloud auth application-default login
}

function run {
    export SUPPRESS_GCLOUD_CREDS_WARNING=true
    JAR=./target/platinum.jar
    if [ ! -f $JAR ]; then
        install
    fi
    java -jar $JAR "$@"
}

function status() {
    kubectl get pods
}

function logs() {
    kubectl logs $1
}

function cleanup() {
    if [ $# -ne 3 ]; then
        echo "$(bold "USAGE: platinum cleanup -n <run_name>")"
        echo "$(bold "  -n <run_name>") Name of run for which you'd like to cleanup (created with platinum run -n <run_name>)"
        echo "$(bold "  -p <project>") GCP project ID where the run was completed. Used to cleanup service accounts"
        echo "$(bold "  -r <region>") GCP region where the cluster was created"
        exit 1
    fi
    service_account="platinum-${1}@${2}.iam.gserviceaccount.com"
    gcloud container clusters delete $1 --region $region --project $2
    for role in iam.serviceAccountUser compute.admin storage.admin; do
        gcloud projects remove-iam-policy-binding $2 --member=serviceAccount:$service_account --role=roles/${role} >/dev/null
    done
    gcloud iam service-accounts delete $service_account --project $2
}

CMD=$1
shift
project=""
region=""
subnet=""
while getopts ':p:r:n:s:' flag; do
    case "${flag}" in
        p) project=${OPTARG} ;;
        r) region=${OPTARG} ;;
        n) run_name=${OPTARG} ;;
        s) subnet=${OPTARG} ;;
        *) ;;
    esac
done

case $CMD in
configure)
    configure $project $region $subnet
    ;;
login)
    login
    ;;
run)
    run "$@"
    ;;
status)
    status
    ;;
logs)
    logs $1
    ;;
cleanup)
    cleanup $run_name $project $region
    ;;
upgrade)
    upgrade
    ;;
*)
    echo "Unknown command \"${CMD}\", provide one of [configure|login|run|status|logs|cleanup|upgrade]"
    exit 1
    ;;
esac
